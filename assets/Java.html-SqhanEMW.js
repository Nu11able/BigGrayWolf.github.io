import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as a,a as d}from"./app-dYRofbQn.js";const n={},i=d(`<h1 id="写在前面" tabindex="-1"><a class="header-anchor" href="#写在前面" aria-hidden="true">#</a> 写在前面</h1><p>本人有一些c与c++的基础，阅读此书的同时记录一些学习的笔记与心得，在此与各位分享，其中有些是本人的一些理解，错误之处还请不吝赐教。同时一些本人认为没必要的将只会用黑体字标出，表示有此物存在，若有必要后面会加以补充。</p><h1 id="第一章-java程序设计概念" tabindex="-1"><a class="header-anchor" href="#第一章-java程序设计概念" aria-hidden="true">#</a> 第一章 java程序设计概念</h1><p>Java是一门面向对象语言(Sun是其原先的开发公司)；<strong>java中的int永远为32位</strong>；Java是解释型的(但其代码运行速度与c++相差无几？？)；</p><h1 id="第二章-java程序设计环境" tabindex="-1"><a class="header-anchor" href="#第二章-java程序设计环境" aria-hidden="true">#</a> 第二章 Java程序设计环境</h1><table><thead><tr><th>缩写</th><th>全拼</th></tr></thead><tbody><tr><td>JDK</td><td>Java Development Kit</td></tr><tr><td>JRE</td><td>Java Runtime Enviroment</td></tr><tr><td>SE</td><td>Standard Edition(这是平时主要用的)</td></tr><tr><td>EE</td><td>Enterprise Edition</td></tr><tr><td>SDK</td><td>Software Development Kit</td></tr></tbody></table><p><strong>Java环境配置</strong></p><p><strong>命令行工具</strong></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>javac</td><td>编译java源文件</td></tr><tr><td>java</td><td>运行Java程序</td></tr><tr><td>例子：</td><td></td></tr></tbody></table><pre><code> javac Welcome.java
 java Welcome
</code></pre><p><strong>运行javac命令后会生成相应的.class文件 运行java命令的时候不要带上后缀</strong></p><p><strong>构建并运行applet</strong></p><h1 id="第三章-java的基本程序设计结构" tabindex="-1"><a class="header-anchor" href="#第三章-java的基本程序设计结构" aria-hidden="true">#</a> 第三章 Java的基本程序设计结构</h1><h2 id="一个简单的java应用程序" tabindex="-1"><a class="header-anchor" href="#一个简单的java应用程序" aria-hidden="true">#</a> 一个简单的Java应用程序</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>//注释1
/*注释2*/
/**此种注释方法可用来自动生成文档(不是很清楚这个方法的具体用处)*/
public class FirstSample {
	public static void main(String[] args) {
		System.out.println(&quot;Hello World!&quot;);//println会自动在结尾加上换行符
		//System.out.print(&quot;Hello World!&quot;);//结尾没有换行符
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明:Java 程序的Hello world 编译并运行： <em>javac FirstSample.java</em><em>java FirstSample</em></p><p><strong>重点：</strong></p><ul><li><strong>Java应用程序的全部内容都必须放置在类中</strong></li><li><strong>源代码的文件名必须与公共类的名字相同，且以.java作为扩展名</strong>(上述代码的文件名应保存为FirstSample.java)</li><li><strong>根据java语言规范，main方法必须声明为public</strong></li><li><strong>每个java应用程序都必须有一个main方法</strong></li></ul><p>Java区分大小写，与c/c++类似:在每一句的后面都要加上&#39;;&#39; ；;标准的命名规范:骆驼命名法,既每个单词首字母大写；</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><table><thead><tr><th>类型</th><th>存储需求</th></tr></thead><tbody><tr><td>int</td><td>4字节</td></tr><tr><td>short</td><td>2字节</td></tr><tr><td>long</td><td>8字节</td></tr><tr><td>byte</td><td>1字节</td></tr><tr><td>float</td><td>4字节</td></tr><tr><td>double</td><td>8字节</td></tr><tr><td>char</td><td>1字节？</td></tr><tr><td>boolean</td><td>1字节？<strong>整型值和布尔值之间不能相互转换</strong></td></tr><tr><td>(取值范围与c/c++类似，转义字符&#39;\\n&#39;,&#39;\\t&#39;等与c/c++类似)</td><td></td></tr><tr><td>长整数带后缀‘L’如(40000000000000L)；十六进制0x前缀；八进制前缀0；二进制前缀0b；</td><td></td></tr><tr><td><strong>术语解释</strong></td><td></td></tr></tbody></table><ul><li>码点：与一个编码表中某个字符对应的代码值(如:ASCII中‘a’为97)</li><li>代码单元：在基本的多语言级别中，每个字符用16位表示，通常被称为代码单元 (不建议在程序中使用char类型，除非确实有需要，最好将字符串作为抽象数据类型处理[太过于底层]) 如果想要知道哪些Unicode字符属于Java中的“字母”，可以使用Character类的isJavaIdentifierStart和isJavaIdentitierPart方法检查</li></ul><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p><strong>变量初始化：type enlement;(int i);</strong> Java中可以将代码放在任何地方(尽量的靠近变量第一次使用的地方);在Java中不区分变量的声明与定义 <strong>常量 final element;(final double PI = 3.1415953)</strong> 类常量：希望某个常量可以在类的多个方法中使用 public static final double PI = 3.1415953;</p><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><p>当参与/运算的两个数都是int时表示整数除法，否则表示浮点除法(c/c++，其余% 等都类似) <strong>使用strictfp关键字标记的方法必须使用严格的浮点计算来生成可再生的结果</strong></p><h3 id="数学函数与常量" tabindex="-1"><a class="header-anchor" href="#数学函数与常量" aria-hidden="true">#</a> 数学函数与常量</h3><ul><li>Math.sqrt()</li><li>Math.pow()</li><li>Math.sin()</li><li>Math.cos()</li><li>Math.exp()</li><li>Math.round() 四舍五入，返回的结果方法为long型</li><li>Math.PI</li><li>Math.E 常量e</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>import static java.lang.Math.*
//导入Math下的数学函数,之后的使用过程中不必再添加Math前缀
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>运算符</strong></p><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>+=</td><td></td></tr><tr><td>-=</td><td></td></tr><tr><td>......</td><td></td></tr><tr><td>%=</td><td></td></tr><tr><td>&lt;&lt;=</td><td></td></tr></tbody></table><blockquote><blockquote><blockquote><p>=| ++| --| ?😐 &amp; | ^ ~ &amp;&amp; ||| &lt;&lt; &gt;&gt;| &gt;&gt;&gt;|用0填充高位，不存在&lt;&lt;&lt;运算符</p></blockquote></blockquote></blockquote><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>String e = &quot;Hello&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>String类方法</strong></p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>substring(a,b)</td><td>取[a,b]这一子串</td></tr><tr><td>join(&quot;/&quot;,&quot;s&quot;,&quot;M&quot;,&quot;XL&quot;)</td><td>拼接后的字符串为“s/M/XL”</td></tr><tr><td>a.equals(t)</td><td>判断a字符串与字符串t是否相等(不使用==)</td></tr><tr><td>equalsIgnoreCase(t)</td><td>与t比较大小并不区分大小写</td></tr><tr><td>charAt(n)</td><td>返回位置n的代码单元，类似于python的chr()</td></tr><tr><td>codePointAt(n)</td><td>返回第n个码点</td></tr><tr><td>offsetByCodePoints(0,n)</td><td>返回第n个码点</td></tr><tr><td>length()</td><td>返回字符串长度</td></tr><tr><td>yourString.codePointCount(0,yourString.length())</td><td>返回码点数量</td></tr><tr><td>toArray()</td><td>将一个字符串转换为码点数组</td></tr><tr><td>String(codePoints,0,codePoints.length)</td><td>与toArray相反</td></tr><tr><td><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/String.html" target="_blank" rel="noopener noreferrer">String类的在线doc</a></td><td></td></tr></tbody></table><h3 id="构建字符串" tabindex="-1"><a class="header-anchor" href="#构建字符串" aria-hidden="true">#</a> 构建字符串</h3><p>将多个字符串构建成一个字符串(字符串构建器SreingBuilder)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>StringBuilder builder = new StringBuiler();
builder.append(string1);
builder.append(string2);
......
builder.append(stringn);
String completedString = builder.toString();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th><strong>StringBuilder方法</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>Stringbuilder()</td><td>构造空的字符串构建器</td></tr><tr><td>length()</td><td>返回构建器或缓冲器中的代码单元数量</td></tr><tr><td>append()</td><td>追加字符串并返回this</td></tr><tr><td>toString()</td><td>将构建器中的内容转换为字符串</td></tr><tr><td>insert(int offset,String str)</td><td>在offset位置插入字符串并返回this</td></tr><tr><td>delete(int startIndex,int endIndex)</td><td>删除从startIndex到endIndex的代码单元并返回this</td></tr><tr><td><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/StringBuilder.html" target="_blank" rel="noopener noreferrer">StringBuilder在线doc</a></td><td></td></tr></tbody></table><h2 id="输入输出" tabindex="-1"><a class="header-anchor" href="#输入输出" aria-hidden="true">#</a> 输入输出</h2><h3 id="输入输出方法" tabindex="-1"><a class="header-anchor" href="#输入输出方法" aria-hidden="true">#</a> 输入输出方法</h3><p><strong>输出:</strong> <em>System.out.println()</em><strong>输入：</strong> <em>需要包含java.util包</em></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>//首先构造一个Scanner对象，并与“标准输入流”System.in关联
//scanner类定义在java.util中。当使用的类不是在基本的java.lang包中时，需要使用import指示字将相应的包加载进来。
import java.util.*
Scanner in = new Scanner(System.in);
in.nextLine();//输入一行
in.next();//读取一个单词
in.nextInt();//读取一个整数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Scanner类方法</strong></p><table><thead><tr><th>Scanner方法</th><th>功能</th></tr></thead><tbody><tr><td>nextDouble()</td><td></td></tr><tr><td>hasNext()</td><td>检测输入中是否还有其它单词</td></tr><tr><td>hasNextInt()</td><td>检测输入中是否还有整数</td></tr><tr><td>hasNextDouble()</td><td></td></tr><tr><td><a href="https://docs.oracle.com/javase/9/docs/api/java/util/Scanner.html" target="_blank" rel="noopener noreferrer">Scanner在线doc</a></td><td></td></tr></tbody></table><p><strong>java.lang.System java.io.Console</strong></p><h3 id="格式化输出" tabindex="-1"><a class="header-anchor" href="#格式化输出" aria-hidden="true">#</a> 格式化输出</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>System.out.printf(&quot;%8.2f&quot;,x);//用法与c的printf类似
System.out.printf(&quot;Hello %s&quot;,name);
System.out.printf(&quot;%tc&quot;,new Date());//打印当前日期和时间
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件输入与输出" tabindex="-1"><a class="header-anchor" href="#文件输入与输出" aria-hidden="true">#</a> 文件输入与输出</h3><blockquote><p>如果想要对文件进行读取，就需要用一个File对象构造一个Scanner对象，如下所示 要想写入文件，就需要构造PrintWriter对象，在构造器中，只需提供文件名</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>//对文件进行读取(所谓的File对象就是Path.get的返回值？？)
Scanner in = new Scanner(Paths.get(&quot;myfile.txt&quot;),&quot;UTF-8&quot;);
//Scanner in = new Scanner(Paths.get(&quot;C:\\\\myfile.txt&quot;),&quot;UTF-8&quot;);
//写入文件
PrintWriter out = PrintWriter(&quot;myfile.txt&quot;,&quot;UTF-8&quot;);

//可以构造一个带有字符串参数的Scanner，但这个Scanner将这个字符串解释为数据，而不是文件名。例如：
Scanner in = new Scanner(&quot;myfile.txt&quot;);//这个Scanner会将参数作为包含10个字符的数据：‘m’、‘y’等

String dir = System.getProperty(&quot;user.dir&quot;);//使用此方式找到路径的位置，也就是你的.class文件所在的Project的文件的路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">class</th><th style="text-align:center;">methods</th><th style="text-align:left;">description</th></tr></thead><tbody><tr><td style="text-align:center;">java.util.Scanner</td><td style="text-align:center;">Scanner()</td><td style="text-align:left;">构造一个从文件或字符串读取数据的Scanner</td></tr><tr><td style="text-align:center;">java.io.PrintWriter</td><td style="text-align:center;">PrintWriter(String filename)</td><td style="text-align:left;">构造一个将数据写入文件的PrintWriter</td></tr><tr><td style="text-align:center;">java.nio.file.Paths</td><td style="text-align:center;">get(String Pathname)</td><td style="text-align:left;">根据给定的路径名构造一个Path</td></tr><tr><td style="text-align:center;"><strong>注意要包含相应的Module/Class</strong></td><td style="text-align:center;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;"><a href="https://docs.oracle.com/javase/9/docs/api/java/io/PrintWriter.html" target="_blank" rel="noopener noreferrer">PrintWriter在线doc</a> <a href="https://docs.oracle.com/javase/9/docs/api/java/nio/file/Paths.html" target="_blank" rel="noopener noreferrer">file.Paths在线doc</a> <a href="https://docs.oracle.com/javase/9/docs/api/java/util/Scanner.html" target="_blank" rel="noopener noreferrer">Scanner在线doc</a></td><td style="text-align:center;"></td><td style="text-align:left;"></td></tr></tbody></table><h2 id="控制流程-与c-c-类似" tabindex="-1"><a class="header-anchor" href="#控制流程-与c-c-类似" aria-hidden="true">#</a> 控制流程(与c/c++类似)</h2><p>块作用域 : 与c/c++类似</p><p>条件语句 : if (condition) statement [else statement]</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>if(elementA&gt;elementB){
	int temp = elementA;
	elementA = elementB;
	elementB = temp;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环 : while (condition) statment : do statement while (condition) : for (condition1; condition2; condition3) : switch(){case condition1: ...}</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>while(i&lt;100){ sum += i;	i++;}

do{ i+=10; if(i%16 == 0)break; } while(i&lt;100);

for( int i = 0; i &lt; 10; i++){ if(i == 8) continue; System.out.print(i+&quot; &quot;); }

switch(i){
	case 10:
		break;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="大数值" tabindex="-1"><a class="header-anchor" href="#大数值" aria-hidden="true">#</a> 大数值</h2><p><em>java.math包中有两个可以处理包含任意长度数字序列的数值的类：BigInteger和BigDecimal</em> 但大整数不能使用+和*等运算符来处理大数值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>BigInteger a = BigInteger.valueOf(100);//将普通数值转换为大数值
BigInteger b = a;
BigInteger c = a.add(b);//c=a+b;
BigInteger d = c.multiply(b.add(BigInteger.valueOf(2)));//d = c * (b + 2)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>method</th><th>description</th></tr></thead><tbody><tr><td>add(BigInteger other)</td><td>+</td></tr><tr><td>substract(BigInteger other)</td><td>-</td></tr><tr><td>multiply(BigInteger other)</td><td>*</td></tr><tr><td>divide(BigInteger other)</td><td>/</td></tr><tr><td>mod(BigInteger other)</td><td>%</td></tr><tr><td>compareTo(BigInteger other)</td><td>==</td></tr><tr><td>valueOf(long x)</td><td>将x转换为BigInteger</td></tr><tr><td><a href="https://docs.oracle.com/javase/9/docs/api/java/math/BigDecimal.html" target="_blank" rel="noopener noreferrer">BigDecimal在线doc</a> <a href="https://docs.oracle.com/javase/9/docs/api/java/math/BigInteger.html" target="_blank" rel="noopener noreferrer">BigInteger在线doc</a></td><td></td></tr></tbody></table><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><ul><li><strong>声明数组:</strong> <em>arrayType arrayName[]; 或者arrayType[] arrayName;</em></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>int []a;//int a []; 这只是声明了变量a
int []a = new int [100];//使用new运算符将a初始化为一个真正的数组
//创建一个数字数组时，所有元素都初始化为0，boolean数组会初始化为false，对象数组会初始化为null
//一旦创建了数组就不能再改变它的大小
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>for each循环:</strong> <em>for (variable : collection) statement</em> 与c++11类似</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>for (int element : a)
	System.out.println(element);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>数组初始化及匿名数组:</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>int smallPrimes1 = {2,3,5,7,11,13};
new int []{2,3,5,7,11,13};//初始化匿名数组
int smallPrimes2 = new int []{2,3,5,7,11,13};
int [] anonymous = {17,19,23,29,31,37};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>数组拷贝</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>smallPrimes = anonymous;//此时smallPrimes与anonymouus引用同一个数组，既它们指向同一块内存
//如果希望将一个数组中的所有值拷贝到新的数组中去，使用Arrays类的copyOf方法
int [] smallPrimes= Arrays.copyOf(anonymous,anonymous.length);//第二个参数为长度
//Java中没有指针运算，不能通过a+1来得到数组的下一个元素
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>命令行参数&amp;&amp;数组排序:</strong> 假设一个Message.class 执行命令:java Message -g ruel world args[0]=&quot;-g&quot; args[1]=&quot;ruel&quot; args[2]=&quot;world&quot; 与c/c++类似，只不过程序本身不包含在内</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>int []a = new int [100];
Arrays.sort(a);
//Math.random方法返回0到1之间的一个随机浮点数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>多维数组</strong> <em>多维数组中每个元素的长度可以不同(不规则数组)</em></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>double [][]balances;//在使用new对多维数组进行初始化之前不能使用它
balances = new double[rows][columns];
/*
for (double []row : balances)
	for (double value : row )
		do something with value
*/

//使用不规则数组存储杨辉三角
/*
1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
*/
int [][]odds = new int[NMAX + 1][];
for (int n =0; n &lt; NMAX + 1; n++)
	odds[n] = new int[n+1];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>methods</th><th>description</th></tr></thead><tbody><tr><td>String toString(type []a)</td><td></td></tr><tr><td>type copyOf(type []a, int length)</td><td></td></tr><tr><td>type copyOfRange(type []a, int start, int end)</td><td></td></tr><tr><td>void sort(type []a)</td><td></td></tr><tr><td>void fill(tpye []a,type v)</td><td>用v填充数组a</td></tr><tr><td>boolean equals(type []a, type []b)</td><td>如果数组大小对应元素相等,返回true</td></tr><tr><td>int binarySearch(type []a,type v)</td><td></td></tr><tr><td>int binarySearch(type []a, int start, int end, type v)</td><td>在数组a中二分查找v，查找成功则返回下标否则返回一个负值r</td></tr><tr><td><a href="https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html" target="_blank" rel="noopener noreferrer">Arrays在线doc</a></td><td></td></tr></tbody></table><h1 id="第四章-对象和类" tabindex="-1"><a class="header-anchor" href="#第四章-对象和类" aria-hidden="true">#</a> 第四章 对象和类</h1><p>与c++类似,有很多相似的地方,都有构造函数(Java里叫构造器?)</p><ul><li><blockquote><p>在Java中,任何对象变量的值都是对存储在另外一个地方的一个对象的引用</p></blockquote></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Date deadline;//deadline这时候并不能使用,必须先将其初始化之后才能使用
//上一句在c++里面相当于 Date* deadline;所以一个Java对象变量只能通过new来初始化
//deadline = null; //可以显示的将一个类设置为null,表明这个对象变量目前没有引用任何对象
deadline = new Date();//初始化deadline
//deadline这时候也只是一个对象的引用,它并不包含整个类(有点像python?)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="第五章-继承" tabindex="-1"><a class="header-anchor" href="#第五章-继承" aria-hidden="true">#</a> 第五章 继承</h1><ul><li>不允许扩展的类被称为final类</li><li>子类不能覆盖类中被声明为final的方法</li><li>类的类型转换只能在继承链上从下到上转换(instanceof 用来检验是否能够成功的进行转换)</li><li>abstract</li></ul><p>==今天先到这里了，争取一星期跟新一章== ==标记文本== <s>删除文本</s></p><p>H~2~O is是液体。 2^10^ 运算结果是 1024.</p><h2 id="生成一个适合你的列表" tabindex="-1"><a class="header-anchor" href="#生成一个适合你的列表" aria-hidden="true">#</a> 生成一个适合你的列表</h2><ul><li>项目 <ul><li>项目 <ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li>[ ] 计划任务</li><li>[x] 完成任务</li></ul><h3 id="设定内容居中、居左、居右" tabindex="-1"><a class="header-anchor" href="#设定内容居中、居左、居右" aria-hidden="true">#</a> 设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中 使用<code>:----------</code>居左 使用<code>----------:</code>居右</p><table><thead><tr><th style="text-align:center;">第一列</th><th style="text-align:right;">第二列</th><th style="text-align:left;">第三列</th></tr></thead><tbody><tr><td style="text-align:center;">第一列文本居中</td><td style="text-align:right;">第二列文本居右</td><td style="text-align:left;">第三列文本居左</td></tr></tbody></table><h3 id="smartypants" tabindex="-1"><a class="header-anchor" href="#smartypants" aria-hidden="true">#</a> SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：</p><table><thead><tr><th>TYPE</th><th>ASCII</th><th>HTML</th></tr></thead><tbody><tr><td>Single backticks</td><td><code>&#39;Isn&#39;t this fun?&#39;</code></td><td>&#39;Isn&#39;t this fun?&#39;</td></tr><tr><td>Quotes</td><td><code>&quot;Isn&#39;t this fun?&quot;</code></td><td>&quot;Isn&#39;t this fun?&quot;</td></tr><tr><td>Dashes</td><td><code>-- is en-dash, --- is em-dash</code></td><td>-- is en-dash, --- is em-dash</td></tr></tbody></table><h2 id="创建一个自定义列表" tabindex="-1"><a class="header-anchor" href="#创建一个自定义列表" aria-hidden="true">#</a> 创建一个自定义列表</h2><p>Markdown : Text-to-HTML conversion tool</p><p>Authors : John : Luke</p><h2 id="如何创建一个注脚" tabindex="-1"><a class="header-anchor" href="#如何创建一个注脚" aria-hidden="true">#</a> 如何创建一个注脚</h2><p>一个具有注脚的文本。[^2] [^2]: 注脚的解释</p><h2 id="注释也是必不可少的" tabindex="-1"><a class="header-anchor" href="#注释也是必不可少的" aria-hidden="true">#</a> 注释也是必不可少的</h2><p>Markdown将文本转换为 HTML。</p><p>*[HTML]: 超文本标记语言</p><h2 id="katex数学公式" tabindex="-1"><a class="header-anchor" href="#katex数学公式" aria-hidden="true">#</a> KaTeX数学公式</h2><p>您可以使用渲染LaTeX数学表达式 <a href="https://khan.github.io/KaTeX/" target="_blank" rel="noopener noreferrer">KaTeX</a>:</p><p>Gamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ 是通过欧拉积分</p><p>$$ \\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,. $$</p><blockquote><p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener noreferrer">here</a>.</p></blockquote><h2 id="新的甘特图功能-丰富你的文章" tabindex="-1"><a class="header-anchor" href="#新的甘特图功能-丰富你的文章" aria-hidden="true">#</a> 新的甘特图功能，丰富你的文章</h2><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code>gantt
        dateFormat  YYYY-MM-DD
        title Adding GANTT diagram functionality to mermaid
        section 现有任务
        已完成               :done,    des1, 2014-01-06,2014-01-08
        进行中               :active,  des2, 2014-01-09, 3d
        计划一               :         des3, after des2, 5d
        计划二               :         des4, after des3, 5d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关于 <strong>甘特图</strong> 语法，参考 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener noreferrer">这儿</a>,</li></ul><h2 id="uml-图表" tabindex="-1"><a class="header-anchor" href="#uml-图表" aria-hidden="true">#</a> UML 图表</h2><p>可以使用UML图表进行渲染。 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener noreferrer">Mermaid</a>. 例如下面产生的一个序列图：:</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code>sequenceDiagram
张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?
李四--&gt;&gt;王五: 你最近怎么样，王五？
李四--x 张三: 我很好，谢谢!
李四-x 王五: 我很好，谢谢!
Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.

李四--&gt;&gt;张三: 打量着王五...
张三-&gt;&gt;王五: 很好... 王五, 你怎么样?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将产生一个流程图。:</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code>graph LR
A[长方形] -- 链接 --&gt; B((圆))
A --&gt; C(圆角长方形)
B --&gt; D{菱形}
C --&gt; D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关于 <strong>Mermaid</strong> 语法，参考 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener noreferrer">这儿</a>,</li></ul><h2 id="flowchart流程图" tabindex="-1"><a class="header-anchor" href="#flowchart流程图" aria-hidden="true">#</a> FLowchart流程图</h2><p>我们依旧会支持flowchart的流程图：</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code>flowchat
st=&gt;start: 开始
e=&gt;end: 结束
op=&gt;operation: 我的操作
cond=&gt;condition: 确认？

st-&gt;op-&gt;cond
cond(yes)-&gt;e
cond(no)-&gt;op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener noreferrer">这儿</a>.</li></ul><h2 id="导出与导入" tabindex="-1"><a class="header-anchor" href="#导出与导入" aria-hidden="true">#</a> 导出与导入</h2><h3 id="导出" tabindex="-1"><a class="header-anchor" href="#导出" aria-hidden="true">#</a> 导出</h3><p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p><h3 id="导入" tabindex="-1"><a class="header-anchor" href="#导入" aria-hidden="true">#</a> 导入</h3><p>如果你想加载一篇你写过的.md文件或者.html文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入， 继续你的创作。</p>`,126),r=[i];function l(s,o){return e(),a("div",null,r)}const u=t(n,[["render",l],["__file","Java.html.vue"]]);export{u as default};
